---
# This is a template .qi.yml file. It shows the available variables to setup the
# applications that will run in the VM enviroment. More examples are available
# in the 'samples' directory.

email: anonymous@testdomain.org

# env_runtime variable sets the VM enviroment that will be used to run the
# applications below. You can see the available environments in 'env' directory.
env_runtime: linux-desktop

# The apps variable lists the applications that must be installed. The
# properties of each application define the source of the code, the way that are
# deployed and how should run
apps:
# The app_name variable sets a unique identifier that can be used to create the
# instances of the running applications, or to name a directory where all the
# files related to the application will be stored.
  - app_name: name-of-application
# The git_repository variable is used to retrieve the source code of the
# application if the code is not available through a shared folder. You can also
# set a git_branch variable to set the branch, tag, commit, or pull request to
# retrieve.
    git_repository: https://github.com/user/repo.git
    git_branch: pr/1
# The software_stack variable sets the software appliance that will be installed
# in the VM. The avaliable software stacks are in the 'provisioning' directory.
    software_stack: [nodejs | couchdb]
# The deploy variable notifies the stack that this application will be
# launched as a service. Note that the stack must know how to launch this
# application.
deploy: false
# The 'run_in' variable indicates which VM of the environment will contain the
# application. To know the name of the VMs see the environment files found in
# the 'env' directory.
    run_in: fedora
# The setup variable lists the commands that will be executed after the
# provisioning of the software_stack is finished.
    setup:
      - command 1
      - command 2
# The test_cmds variable lists the commands that will be executed on every
# 'vagrant provision' command. This list should contain the commands that test the
# application so that when 'vagrant provision' runs, the application's tests run.
    test_cmds:
      - test command 1
      - test command 2
# The folder variable sets the installation folder of the application inside the
# VM. The 'dest' child variable is the destination folder where the application
# will be installed. If you add a 'src' child variable, Vagrant will create a
# shared folder mapping 'src' on the host to 'dest' in the VM.
    folder:
      dest: "/app/{{ app_name }}"
